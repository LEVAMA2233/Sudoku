#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include<string.h>

#define P printf
#define S scanf

struct juego {
    int tablero[9][9];
    char nombre[30];//nombre del jugador
    int num_modificaciones=0;//Indica cuantas modificaciones válidas ha realizado el usuario
    int calificacion;//Le asigna una calificacion del usuario al resolver el sudoku dependiendo de cuantas modificaciones hizo
};

typedef struct juego JUEGO;
//Funciones para el funcionamiento del sudoku
int menu(char[]); 
void establecer_tablero(JUEGO *juego);
void imprimir_tablero( JUEGO *juego); 
bool verificaCasilla_ingresada(const JUEGO *juego, int fil, int col, int num);
void ingresaNum(JUEGO *juego);
void guardarPartida(JUEGO *,int, int *,JUEGO *,char[30]);
void modifica_casilla(JUEGO *juego,int,int,int);
void cargarPartida(JUEGO *juego, char nombre[30]);
bool ganaste(JUEGO *);
//Funciones para la elaboración de nuevos juegos
void rotaTablero(JUEGO *);
void intercambia_numeros(JUEGO *);

int tablero_inicial[9][9] = {
       {5, 0, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };//El tablero inicial es variable global, podemos acceder a este desde cualquier función
int tablero2[9][9]= {
		{0, 0, 4, 3, 0, 0, 0, 0, 1},
        {0, 3, 0, 0, 9, 0, 4, 0, 5},
        {0, 0, 5, 7, 8, 0, 0, 0, 0},
        {0, 5, 6, 8, 0, 0, 2, 0, 0},
        {0, 0, 0, 5, 0, 0, 0, 3, 0},
        {0, 2, 0, 0, 3, 0, 0, 6, 8},
        {5, 4, 0, 6, 7, 8, 3, 0, 0},
        {7, 0, 3, 9, 0, 0, 0, 0, 0},
        {0, 6, 2, 0, 0, 0, 9, 0, 4}
    };//Este tablero se usara para hacer la transformación de intercambiar números

int main() {
    JUEGO j;
	int a,b,numero;
    int opcion,numJugadores,i=0;//la variable i es el indice con el que identificamos al jugador en el arreglo partidas
    int nuevoJuego;
    char player[30];
    P("Ingrese la cantidad de jugadores: ");S("%d",&numJugadores);
    
    JUEGO *partidas=(JUEGO *)malloc(numJugadores*sizeof(JUEGO));//Asignamos un arreglo de estructuras dinámico
    if(partidas==NULL){
    	P("Surgio un error en la asignacion de memoria.");
    	return 1;
	}
	establecer_tablero(&j);
	imprimir_tablero(&j);
	P("Nombre del jugador %d: ",i);S("%s",partidas[i].nombre);
	strcpy(player,partidas[i].nombre);
	opcion=menu(player);

	
	while(opcion!=10){
		switch(opcion){
			case 1:
				system("cls");
				imprimir_tablero(&j);
				P("\n----------------------------------------------");
				P("\nSeleccionaste Ingresar un numero al tablero\n");
				ingresaNum(&j);
				break;
			case 2:
				system("cls");
				P("\nSELECCIONASTE IMPRIMIR EL TABLERO ACTUAL\n");
				P("||||||||||||||||||||||||||||||||||||||||\n");
				imprimir_tablero(&j);
				if(ganaste(&j))
				opcion=3;
				break;
			case 3:
				guardarPartida(partidas,i,&i,&j,partidas[i].nombre);
				P("\nIngrese el nombre del nuevo jugador: ");
				S("%s",&partidas[i].nombre);
				strcpy(player,partidas[i].nombre);
				system("cls");
				P("El juego se ha reiniciado para el nuevo jugador.\n");
				P("OPCIONES PARA NUEVOS JUEGOS:\n6-$ Cargar partida.\n""7-$ Rotar tablero.\n8-$ Intercambio de numeros.\n"
				"9-$ Intercambio de renglones y columnas.\n");
				S("%d",&nuevoJuego);
				switch(nuevoJuego){
					case 6:
						break;
					case 7:
						rotaTablero(&j);//Función que rota el tablero inicial
						break;
					case 8:
						intercambia_numeros(&j);
						break;
				}
				break;
			case 4:
				system("cls");
				imprimir_tablero(&j);
				P("Ingresa la fila de la casilla a modificar: ");
				S("%d",&a);
				P("Ingresa la columna de la casilla a modificar: ");
				S("%d",&b);
				if(a<1||a>9||b<1||b>9){
					P("Fila y/o casilla no valida.\n");
				}
				else{
					P("Ingresa el numero para la casilla (%d,%d): ",a,b);
					S("%d",&numero);
					if(numero<1||numero>9){
						P("Numero no valido.\n");
					}
					else if(tablero_inicial[a-1][b-1]==0&&j.tablero[a-1][b-1]!=0){
						modifica_casilla(&j,a-1,b-1,numero);
					}
					else
					P("Accion no valida, no modifiques las casillas iniciales o casillas con valor cero.\n");
				}
				break;
			case 5:
				system("cls");
				break;
			
			case 9:
				break;
			default:
				P("NO SELECCIONASTE UNA OPCION VALIDA.\n");
				break;
		}
		if(ganaste(&j)){
			opcion=3;
		}
		else
		opcion=menu(player);
	}

    return 0;
}

int menu(char nombre[30]){
	int opc;
	P("\nBienvenido al Sudoku! %s\n",nombre);
    P("\nPresione el numero indicado en las opciones del menu, presione 10 para salir.\n");
	P("\nMENU DE JUEGO:\n 1-$ Ingresa valor al tablero.\n2-$ Imprimir estado actual del juego\n3-$ Guardar partida\n"
	"4-$ Modificar casilla\n5-$ Borrar pantalla.\n10-$ SALIR.\n");
	P("$:");S("%d",&opc);
	return opc;
}

void establecer_tablero(JUEGO *juego) {
    // Establecer el tablero inicial con los valores proporcionados
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            juego->tablero[i][j] = tablero_inicial[i][j];
        }
    }
}//Esta función se puede mandar a llamar siempre que se requiera reestablecer los valores iniciales del tablero


void imprimir_tablero( JUEGO *juego) {//EL apuntador recibe la dirección de memoria de la variable j en el main
    P("\nTablero:\n");                     //A su vez este apuntador apunta a la estructura JUEGO
    P("1 2 3 4 5 6 7 8 9\n"
	"- - - - - - - - - -\n");
    for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            P("%d ", juego->tablero[i][j]);
        }
        P("|%d\n", i+1);
    }
    P("- - - - - - - - - -\n");
}

bool verificaCasilla_ingresada(const JUEGO *juego, int fil, int col, int num) {
    // Verificar la fila y la columna
    for (int i = 0; i < 9; i++) {
        if (juego->tablero[fil][i] == num || juego->tablero[i][col] == num) {
            return false; // Número repetido encontrado en la fila o columna
        }
    }
    // Verificamos el cuadrante 3x3
    int inicioFila = fil-1;
    int inicioCol = col-1;
    for (int i = inicioFila; i < inicioFila; i++) {
        for (int j = inicioCol; j < inicioCol; j++) {
            if (juego->tablero[i][j] == num) {
                return false; // Número repetido encontrado en el cuadrante 3x3
            }
        }
    }

    return true; 
}

void ingresaNum(JUEGO *juego) {
    int fila, columna, valor;

        P("\nIngrese la fila (1-9):");
        S("%d", &fila);
        P("Ingresa la columna (1-9):");
        S("%d",&columna);
        P("Ingrese el numero para la casilla (%d,%d):",fila,columna);
        S("%d",&valor);
        if ((fila < 1 || fila > 9 || columna < 1 || columna > 9) || (valor < 1 || valor > 9)) {
            P("Entrada no valida. Por favor, ingrese valores validos para la casilla [1-9].\n");
            
        }
        else if (juego->tablero[fila-1][columna-1] == 0 && verificaCasilla_ingresada(juego, fila-1, columna-1 , valor)) {
            juego->tablero[fila - 1][columna - 1] = valor;
            P("\n-------------------------------\n");
            P("Numero agregado exitosamente.\n");
            P("--------------------------------\n");
        } 
		else {
            P("El numero esta repetido o intentaste modificar una casilla inicial. Por favor, ingrese otro valor.\n");
            P("(%d)", juego->tablero[fila-1][columna-1]);
        }
}

void guardarPartida(JUEGO *partidas,int a,int *partidasGuardadas, JUEGO *juego,char nombre[30]) {
    
	partidas[*partidasGuardadas] = *juego; // Guardar el estado actual del juego en el arreglo de partidas
    (*partidasGuardadas)++; // Incrementar el contador de partidas guardadas, cambiamos el valor de i que esta en el main,con paso por referencia
    strcpy(partidas[a].nombre, nombre);
    P("\n####----Partida guardada exitosamente.----####\n");
    
    char filename[40];
    FILE *file;

    // Construir el nombre del archivo con el nombre del jugador y un sufijo .txt
    snprintf(filename, sizeof(filename),"%s.txt",nombre);

    // Intentar abrir/crear el archivo en modo escritura
    file = fopen(filename, "w");
    if(file == NULL) {
        P("No se pudo abrir el archivo para guardar.\n");
        return;
    }

    // Escribir el tablero en el archivo
    for(int i = 0; i < 9; i++) {
        for(int j = 0; j < 9; j++) {
            fprintf(file, "%d ", juego->tablero[i][j]);
        }
        fprintf(file, "\n");
    }

    fclose(file); // Cerrar el archivo
    P("Partida guardada exitosamente en %s.\n", filename);
}

void rotaTablero(JUEGO *juego){

	for(int i=8;i>=0;i--){
    	for(int j=0;j<9;j++){
    		juego->tablero[j][8-i]=tablero_inicial[i][j];
		}
	}
}

void modifica_casilla(JUEGO *juego,int a,int b,int num){
	int aux;
	aux=juego->tablero[a][b];
	juego->tablero[a][b]=num;
	P("\n-----------------------------------------\n");
	P("-----Haz modificado la casilla (%d,%d)=%d!!!\n",a+1,b+1,aux);
	P("-----Su nuevo valor es (%d,%d)=%d!!!",a+1,b+1,num);
	P("\n-----------------------------------------\n");
}

void cargarPartida(JUEGO *juego, char nombre[30]) {
    char filename[40];
    FILE *file;

    // Construir el nombre del archivo con el nombre del jugador y un sufijo .txt
    snprintf(filename, sizeof(filename), "%s.txt", nombre);

    // Intentar abrir el archivo en modo lectura
    file = fopen(filename, "r");
    if(file == NULL) {
        P("No se pudo abrir el archivo para cargar.\n");
        return;
    }

    // Leer el tablero del archivo
    for(int i = 0; i < 9; i++) {
        for(int j = 0; j < 9; j++) {
            if (fscanf(file, "%d", &juego->tablero[i][j]) != 1) {
                P("Error al leer el archivo. El formato del archivo podría ser incorrecto.\n");
                fclose(file); // Es importante cerrar el archivo si ocurre un error durante la lectura
                return;
            }
        }
    }

    fclose(file); // Cerrar el archivo después de cargar con éxito
    P("Partida cargada exitosamente desde %s.\n", filename);
}

bool ganaste(JUEGO *juego){
	int conf=0;
	for (int i = 0; i < 9; i++) {
        for (int j = 0; j < 9; j++) {
            if(juego->tablero[i][j]==0)
            conf++;
        }
    }
            if(conf==0){
            	P("\n!HAS TERMINADO, FELICIDADES!");
            	return true;
			}
			conf=0;
	return false;
}

void intercambia_numeros(JUEGO *juego){
	
	establecer_tablero(juego);//Hacemos que el tablero de la estructura tome los valores del tablero inicial
	for(int i=0;i<9;i++){
		for(int j=0;j<9;j++){
			juego->tablero[i][j]=tablero2[i][j];
			
			switch(juego->tablero[i][j]){
				case 1:
					juego->tablero[i][j]=9;
					break;
				case 2:
					juego->tablero[i][j]=8;
					break;
				case 3:
					juego->tablero[i][j]=5;
					break;
				case 4:
					juego->tablero[i][j]=1;
					break;
				case 5:
					juego->tablero[i][j]=2;
					break;
				case 6:
					juego->tablero[i][j]=4;
					break;
				case 7:
					juego->tablero[i][j]=3;
					break;
				case 8:
					juego->tablero[i][j]=7;
					break;
				case 9:
					juego->tablero[i][j]=1;
					break;
			}
		}
	}	
}


